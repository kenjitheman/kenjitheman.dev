<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Текст on SEAD Club</title>
    <link>//localhost:1313/uk/tags/%D1%82%D0%B5%D0%BA%D1%81%D1%82/</link>
    <description>Recent content in Текст on SEAD Club</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>uk-UA</language>
    <copyright>© SEAD Club</copyright>
    <lastBuildDate>Tue, 16 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/uk/tags/%D1%82%D0%B5%D0%BA%D1%81%D1%82/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>СПОЧАТКУ ПРОЧИТАЙТЕ ЦЕ</title>
      <link>//localhost:1313/uk/docs/docs/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/docs/</guid>
      <description>1. Конвенції Коду 2. Вказівки проекту 3. Стандарти документації 4. Початок роботи 5. Внесення в проекти 6. Кодекс Поведінки 7. Правила версіонування Ласкаво просимо до документації Клубу розробників та інженерів програмного забезпечення (SEAD Club)! Тут можна знайти ключові документи, вказівки та ресурси, щоб допомогти членам клубу дотримуватися кращих практик та ефективно сприяти нашим проектам.
1. Конвенції Коду Документ code-conventions визначає наші стандарти коду та найкращі практики. Дотримання цих конвенцій забезпечує єдність та зручність у нашому кодові.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/docs/#1-конвенції-коду">1. Конвенції Коду</a></li>
<li><a href="/uk/docs/docs/#2-вказівки-проекту">2. Вказівки проекту</a></li>
<li><a href="/uk/docs/docs/#3-стандарти-документації">3. Стандарти документації</a></li>
<li><a href="/uk/docs/docs/#4-початок-роботи">4. Початок роботи</a></li>
<li><a href="/uk/docs/docs/#5-внесення-в-проекти">5. Внесення в проекти</a></li>
<li><a href="/uk/docs/docs/#6-кодекс-поведінки">6. Кодекс Поведінки</a></li>
<li><a href="/uk/docs/docs/#7-правила-версіонування">7. Правила версіонування</a></li>
</ul>
<!-- raw HTML omitted -->
<p>Ласкаво просимо до документації Клубу розробників та інженерів програмного забезпечення (SEAD Club)! Тут можна знайти ключові документи, вказівки та ресурси, щоб допомогти членам клубу дотримуватися кращих практик та ефективно сприяти нашим проектам.</p>
<h2 id="1-конвенції-коду">1. Конвенції Коду</h2>
<p>Документ <a href="/uk/docs/code-conventions">code-conventions</a> визначає наші стандарти коду та найкращі практики. Дотримання цих конвенцій забезпечує єдність та зручність у нашому кодові.</p>
<h2 id="2-вказівки-проекту">2. Вказівки проекту</h2>
<p>Звертайтеся до <a href="/uk/docs/project-guidelines">project-guidelines</a> за вказівками щодо запуску, управління та внесення внеску до проектів у клубі. Тут описано структуру проекту, контроль версій та практики співпраці.</p>
<h2 id="3-стандарти-документації">3. Стандарти документації</h2>
<p>Перевірте <a href="/uk/docs/documentation-standards">documentation-standards</a> за вказівками щодо документування коду, проектів та процесів. Чітка та всебічна документація є важливою для розуміння та обслуговування проекту.</p>
<h2 id="4-початок-роботи">4. Початок роботи</h2>
<p>Перший раз в клубі? Почніть, слідуючи порадам у <a href="/uk/docs/getting-started">getting-started</a> Цей документ надає всеосяжний огляд налаштування вашого середовища розробки та поглиблення в наш робочий процес.</p>
<h2 id="5-внесення-в-проекти">5. Внесення в проекти</h2>
<p>Дізнайтеся, як внести внесок до проектів клубу, читаючи <a href="/uk/docs/contributing">contributing</a> У цьому документі описано процеси створення форків, створення гілок, внесення змін та подання запитів на витяг.</p>
<h2 id="6-кодекс-поведінки">6. Кодекс Поведінки</h2>
<p>Тут ви знайдете <a href="/uk/docs/code-of-conduct">code-of-conduct</a> вказівки чи правила, які визначають очікувану поведінку та принципи для осіб, які беруть участь у певній спільноті, організації чи проекті. Це служить основою для створення позитивного, інклюзивного та поважного середовища, де всі учасники можуть співпрацювати та взаємодіяти між собою.</p>
<h2 id="7-правила-версіонування">7. Правила версіонування</h2>
<p>У нашому процесі розробки програмного забезпечення зберігання чіткого та послідовного версіонування є важливим для ефективної співпраці та розуміння еволюції наших проектів. Документ <a href="/uk/docs/versioning-conventions">versioning-conventions.md</a> визначає вказівки та правила, які ми дотримуємося при версіонуванні нашої кодової бази.</p>
<p>Не соромтеся звертатися до адміністраторів клубу або відкривати питання, якщо у вас є пропозиції або покращення для будь-якого з документів у цьому репозитарії.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Директиви проекту</title>
      <link>//localhost:1313/uk/docs/project-guidelines/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/project-guidelines/</guid>
      <description>1. Структура проекту 2. Контроль версій 3. Співпраця Внесок в директиви проекту Цей документ визначає правила та процеси, які слід дотримуватися при ініціюванні, управлінні та внесенні внесків у проекти в межах клубу.
1. Структура проекту Підтримка послідовної структури проекту допомагає організовувати код та ресурси ефективно. Дотримуйтеся цих правил при структуруванні ваших проектів:
Кореневий каталог: Розмістіть файли, специфічні для проекту (наприклад, README.md, ліцензія) в / (project root).
Вихідний код: Організуйте вихідний код в чіткій структурі (наприклад, main.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/project-guidelines/#1-структура-проекту">1. Структура проекту</a></li>
<li><a href="/uk/docs/project-guidelines/#2-контроль-версій">2. Контроль версій</a></li>
<li><a href="/uk/docs/project-guidelines/#3-співпраця">3. Співпраця</a></li>
<li><a href="/uk/docs/project-guidelines/#внесок-в-директиви-проекту">Внесок в директиви проекту</a></li>
</ul>
<!-- raw HTML omitted -->
<p>Цей документ визначає правила та процеси, які слід дотримуватися при ініціюванні, управлінні та внесенні внесків у проекти в межах клубу.</p>
<h2 id="1-структура-проекту">1. Структура проекту</h2>
<p>Підтримка послідовної структури проекту допомагає організовувати код та ресурси ефективно. Дотримуйтеся цих правил при структуруванні ваших проектів:</p>
<ul>
<li>
<p><strong>Кореневий каталог:</strong> Розмістіть файли, специфічні для проекту (наприклад, README.md, ліцензія) в / (project root).</p>
</li>
<li>
<p><strong>Вихідний код:</strong> Організуйте вихідний код в чіткій структурі (наприклад, <code>main.rs, handlers/, db/</code>).</p>
</li>
<li>
<p><strong>Документація:</strong> Якщо ви плануєте мати документацію - включіть її в <code>docs/</code> для документації проекту.</p>
</li>
</ul>
<h2 id="2-контроль-версій">2. Контроль версій</h2>
<p>Ефективний контроль версій є ключовим для спільної роботи та відстеження змін. Дотримуйтеся цих правил контролю версій:</p>
<ul>
<li>
<p><strong>Вітки:</strong> Використовуйте вітки для нових функцій та виправлення помилок.</p>
</li>
<li>
<p><strong>Повідомлення про коміти:</strong> Пишіть чіткі та лаконічні повідомлення про коміти.</p>
</li>
<li>
<p><strong>Запити на злиття:</strong> Створюйте запити на злиття для перегляду коду перед злиттям в основну гілку.</p>
</li>
<li>
<p><strong>Теги версій:</strong> Позначайте релізи номерами версій для зручності посилання.</p>
</li>
</ul>
<h2 id="3-співпраця">3. Співпраця</h2>
<p>Співпраця - ключ до успішного розвитку проекту. Дотримуйтеся цих правил співпраці:</p>
<ul>
<li>
<p><strong>Зв&rsquo;язок:</strong> Використовуйте канали комунікації проекту для обговорень.</p>
</li>
<li>
<p><strong>Задачі:</strong> Створюйте та відстежуйте завдання за допомогою проблем GitHub.</p>
</li>
<li>
<p><strong>Рецензії коду:</strong> Проводьте ретельні рецензії коду для кожного запиту на злиття.</p>
</li>
</ul>
<h2 id="внесок-в-директиви-проекту">Внесок в директиви проекту</h2>
<p>Якщо у вас є пропозиції чи покращення до цих директив проекту, будь ласка, створіть проблему або надішліть запит на злиття. Ваші відгуки є цінними для забезпечення успіху наших проектів.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Кодекс Поведінки</title>
      <link>//localhost:1313/uk/docs/code-of-conduct/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/code-of-conduct/</guid>
      <description>Наша Зобов&amp;rsquo;язання Наші Стандарти Наші Обов&amp;rsquo;язки Сфера застосування Здійснення Призначення Наша Зобов&amp;rsquo;язання В інтересах створення відкритого та гостинного середовища ми, як учасники та утримувачі, зобов&amp;rsquo;язуємося забезпечити участь у нашому проекті та спільноті вільним від будь-якого виду домагань для всіх, незалежно від віку, розміру тіла, інвалідності, етнічності, трансгендерної ідентичності та вираження, рівня досвіду, національності, особистого вигляду, раси, релігії, сексуальної ідентичності та орієнтації.
Наші Стандарти Приклади поведінки, яка сприяє створенню позитивного середовища, включають:</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/code-of-conduct/#наша-зобовязання">Наша Зобов&rsquo;язання</a></li>
<li><a href="/uk/docs/code-of-conduct/#наші-стандарти">Наші Стандарти</a></li>
<li><a href="/uk/docs/code-of-conduct/#наші-обовязки">Наші Обов&rsquo;язки</a></li>
<li><a href="/uk/docs/code-of-conduct/#сфера-застосування">Сфера застосування</a></li>
<li><a href="/uk/docs/code-of-conduct/#здійснення">Здійснення</a></li>
<li><a href="/uk/docs/code-of-conduct/#призначення">Призначення</a></li>
</ul>
<!-- raw HTML omitted -->
<h2 id="наша-зобовязання">Наша Зобов&rsquo;язання</h2>
<p>В інтересах створення відкритого та гостинного середовища ми, як учасники та утримувачі, зобов&rsquo;язуємося забезпечити участь у нашому проекті та спільноті вільним від будь-якого виду домагань для всіх, незалежно від віку, розміру тіла, інвалідності, етнічності, трансгендерної ідентичності та вираження, рівня досвіду, національності, особистого вигляду, раси, релігії, сексуальної ідентичності та орієнтації.</p>
<h2 id="наші-стандарти">Наші Стандарти</h2>
<p>Приклади поведінки, яка сприяє створенню позитивного середовища, включають:</p>
<ul>
<li>
<p>Використання привітної та інклюзивної мови</p>
</li>
<li>
<p>Повага до різних точок зору та досвіду</p>
</li>
<li>
<p>Гідне прийняття конструктивної критики</p>
</li>
<li>
<p>Зосередження на тому, що є найкращим для спільноти</p>
</li>
<li>
<p>Виявлення емпатії до інших учасників спільноти</p>
</li>
</ul>
<p>Приклади неприйнятної поведінки учасниками включають:</p>
<ul>
<li>
<p>Використання сексуалізованої мови або образів та непроханого сексуального висловлення чи наближення</p>
</li>
<li>
<p>Публічне чи приватне домагання</p>
</li>
<li>
<p>Розміщення особистої інформації інших, такої як фізична чи електронна адреса, без явної згоди</p>
</li>
<li>
<p>Інше поведінкове, яке за розумінням може вважатися непридатним у професійному оточенні</p>
</li>
</ul>
<h2 id="наші-обовязки">Наші Обов&rsquo;язки</h2>
<p>Утримувачі проекту відповідальні за пояснення стандартів прийнятної поведінки та зобов&rsquo;язані вжити відповідних та справедливих корективних заходів у відповідь на будь-які випадки неприйнятної поведінки.</p>
<p>Утримувачі проекту мають право та обов&rsquo;язок видаляти, редагувати чи відхиляти коментарі, коміти, код, вікі-редагування, проблеми та інші внески, які не відповідають цьому Кодексу Поведінки, або тимчасово чи назавжди забороняти будь-якого учасника за інше неприпустиме, загрозливе, образливе чи шкід</p>
<p>ливе поведінка.</p>
<h2 id="сфера-застосування">Сфера застосування</h2>
<p>Цей Кодекс Поведінки застосовується як у межах просторів проекту, так і в громадських місцях, коли особа представляє проект чи його спільноту. Прикладами представлення проекту чи спільноти є використання офіційної електронної адреси проекту, публікація через офіційний обліковий запис у соціальній мережі або виступ як призначений представник на онлайн- або офлайн-події.</p>
<h2 id="здійснення">Здійснення</h2>
<p>Випадки образливої, домаганської чи інакшої неприйнятної поведінки можуть бути повідомлені звертанням до команди проекту за адресою [the.sead.club@gmail.com]. Усі скарги будуть розглянуті та розслідовані і призведуть до відповіді, яка вважатиметься необхідною та відповідною обставинам. Команда проекту зобов&rsquo;язана зберігати конфіденційність стосовно особи, яка подала звіт про інцидент. Додаткові деталі конкретних політик здійснення можуть бути опубліковані окремо.</p>
<p>Утримувачі проекту, які не дотримуються або не застосовують Кодекс Поведінки добросовісно, можуть стикнутися з тимчасовими чи постійними наслідками, визначеними іншими членами лідерства проекту.</p>
<h2 id="призначення">Призначення</h2>
<p>Цей Кодекс Поведінки адаптовано з <a href="https://www.contributor-covenant.org">Contributor Covenant</a> версія 2.0, доступна за адресою <a href="https://www.contributor-covenant.org/version/2/0/code_of_conduct.html">https://www.contributor-covenant.org/version/2/0/code_of_conduct.html</a></p>
<p>Для відповідей на загальні питання щодо цього кодексу поведінки, див. <a href="https://www.contributor-covenant.org/faq">https://www.contributor-covenant.org/faq</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Конвенції Версіювання</title>
      <link>//localhost:1313/uk/docs/versioning-conventions/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/versioning-conventions/</guid>
      <description>Вступ Огляд Вступ Специфікація семантичного версіонування (SemVer) Приклади Інкремент Основної Версії Інкремент Додаткової Версії Інкремент Патч Версії Версія Попередньої Версії Метадані Збірки Чому використовувати Семантичне Версіонування? Часті питання (FAQ) Як мені поводитися з версіями під час початкового етапу розробки 0.y.z? Як я можу зрозуміти, коли випускати версію 1.0.0? Це не сприяє швидкому розвитку і швидкій ітерації? Якщо навіть найменші зворотно-несумісні зміни у вузькому API вимагають інкремента основної версії, чи не буду я дуже швидко на версії 42.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/versioning-conventions/#вступ">Вступ</a></li>
<li><a href="/uk/docs/versioning-conventions/#огляд">Огляд</a></li>
<li><a href="/uk/docs/versioning-conventions/#вступ">Вступ</a></li>
<li><a href="/uk/docs/versioning-conventions/#специфікація-семантичного-версіонування-semver">Специфікація семантичного версіонування (SemVer)</a></li>
<li><a href="/uk/docs/versioning-conventions/#приклади">Приклади</a>
<ul>
<li><a href="/uk/docs/versioning-conventions/#інкремент-основної-версії">Інкремент Основної Версії</a></li>
<li><a href="/uk/docs/versioning-conventions/#інкремент-додаткової-версії">Інкремент Додаткової Версії</a></li>
<li><a href="/uk/docs/versioning-conventions/#інкремент-патч-версії">Інкремент Патч Версії</a></li>
<li><a href="/uk/docs/versioning-conventions/#версія-попередньої-версії">Версія Попередньої Версії</a></li>
<li><a href="/uk/docs/versioning-conventions/#метадані-збірки">Метадані Збірки</a></li>
</ul>
</li>
<li><a href="/uk/docs/versioning-conventions/#чому-використовувати-семантичне-версіонування">Чому використовувати Семантичне Версіонування?</a></li>
<li><a href="/uk/docs/versioning-conventions/#часті-питання-faq">Часті питання (FAQ)</a>
<ul>
<li><a href="/uk/docs/versioning-conventions/#як-мені-поводитися-з-версіями-під-час-початкового-етапу-розробки-0yz">Як мені поводитися з версіями під час початкового етапу розробки 0.y.z?</a></li>
<li><a href="/uk/docs/versioning-conventions/#як-я-можу-зрозуміти-коли-випускати-версію-100">Як я можу зрозуміти, коли випускати версію 1.0.0?</a></li>
<li><a href="/uk/docs/versioning-conventions/#це-не-сприяє-швидкому-розвитку-і-швидкій-ітерації">Це не сприяє швидкому розвитку і швидкій ітерації?</a></li>
<li><a href="/uk/docs/versioning-conventions/#якщо-навіть-найменші-зворотно-несумісні-зміни-у-вузькому-api-вимагають-інкремента-основної-версії-чи-не-буду-я-дуже-швидко-на-версії-4200">Якщо навіть найменші зворотно-несумісні зміни у вузькому API вимагають інкремента основної версії, чи не буду я дуже швидко на версії 42.0.0?</a></li>
<li><a href="/uk/docs/versioning-conventions/#документувати-весь-вузький-api-це-занадто-багато-роботи">Документувати весь вузький API - це занадто багато роботи!</a></li>
<li><a href="/uk/docs/versioning-conventions/#що-робити-якщо-я-випадково-випустив-несумісні-зміни-в-публічному-api-як-мінорну-версію">Що робити, якщо я випадково випустив несумісні зміни в публічному API як мінорну версію?</a></li>
<li><a href="/uk/docs/versioning-conventions/#що-робити-якщо-я-оновлюю-власні-залежності-без-зміни-публічного-api">Що робити, якщо я оновлюю власні залежності без зміни публічного API?</a></li>
<li><a href="/uk/docs/versioning-conventions/#що-робити-якщо-я-непроцільно-змінив-публічне-api-так-що-це-не-відповідає-зміні-номера-версії-тобто-код-неправильно-вводить-значущі-зміни-в-патч-релізі">Що робити, якщо я непроцільно змінив публічне API так, що це не відповідає зміні номера версії (тобто код неправильно вводить значущі зміни в патч-релізі)?</a></li>
<li><a href="/uk/docs/versioning-conventions/#як-мені-поводитися-зі-зстарюючою-функціональністю">Як мені поводитися зі зстарюючою функціональністю?</a></li>
<li><a href="/uk/docs/versioning-conventions/#чи-існує-обмеження-розміру-рядка-версії-у-semver">Чи існує обмеження розміру рядка версії у SemVer?</a></li>
<li><a href="/uk/docs/versioning-conventions/#чи-є-v123-семантичною-версією">Чи є &ldquo;v1.2.3&rdquo; семантичною версією?</a></li>
</ul>
</li>
<li><a href="/uk/docs/versioning-conventions/#про">Про</a></li>
<li><a href="/uk/docs/versioning-conventions/#ліцензія">Ліцензія</a></li>
</ul>
<!-- raw HTML omitted -->
<h2 id="вступ">Вступ</h2>
<p>Цей документ описує конвенції версіонування, що прийняті Клубом інженерії програмного забезпечення та розробки при Державному університеті інформаційних та комунікаційних технологій. Ці конвенції базуються на стандартних практиках версіонування в мові програмування Rust. Семантичне версіонування 2.0.0</p>
<h2 id="огляд">Огляд</h2>
<p>Заданому номеру версії MAJOR.MINOR.PATCH, збільште:</p>
<ol>
<li>
<p>MAJOR - версію при внесенні несумісних змін API</p>
</li>
<li>
<p>MINOR - версію при додаванні функціоналу сумісним способом з попередніми версіями</p>
</li>
<li>
<p>PATCH - версію при виправленні помилок, сумісних з попередніми версіями</p>
</li>
</ol>
<p>Додаткові мітки для передвищення та метаданих збірки доступні як розширення
формату MAJOR.MINOR.PATCH.</p>
<h2 id="вступ-1">Вступ</h2>
<p>У світі управління програмним забезпеченням існує місце, відоме як
&ldquo;пекло залежностей&rdquo;. Чим більше росте ваша система та чим більше пакетів ви
інтегруєте в своє програмне забезпечення, тим більше ймовірності опинитися, одного
дня, в цьому ярі діску.</p>
<p>У системах з численними залежностями випуск нових версій пакетів може швидко
перетворитися на кошмар. Якщо вказані занадто жорсткі вимоги до залежностей, ви ризикуєте застрягти на версії (неможливість оновлення пакету без випуску нових версій кожного залежного пакету). Якщо вимоги до залежностей вказані занадто вільно, вас невідмінно укусить &ldquo;проміскуючість версій&rdquo; (припущення сумісності з більшою кількістю майбутніх версій, ніж це розумно). Ви опиняєтеся в пеклі залежностей, коли блокування версії та/або проміскуючість версій ускладнюють легке та безпечне рухання вашого проекту вперед.</p>
<p>Як рішення цього проблеми, був запропонований простий набір правил і
вимог, які визначають, як присвоюються та збільшуються номери версій.
Ці правила базуються на, але не обмежуються передісторією
широко вживаних загальних практик в області як закритого, так і відкритого програмного забезпечення.
Для того, щоб ця система працювала, спочатку потрібно оголосити публічний API.
Це може бути документацією або забезпечуватися кодом. В будь-якому випадку важливо, щоб це API було чітким і точним. Після ідентифікації вашого публічного API, зміни в ньому повинні бути комуніковані з конкретними збільшеннями вашого номера версії. Розгляньте формат версії X.Y.Z (Основне.Мінорне.Патч). Виправлення помилок, які не впливають на API, збільшують версію патча, додавання/зміни API, сумісні з попередніми версіями, збільшують версію мінора, а зміни API, що несумісні з попередніми версіями, збільшують версію основного.</p>
<p>Цей набір правил був названий &ldquo;Семантичне версіонування&rdquo;. За цією схемою номери версій
та спосіб їх зміни вказують на зміст коду та те, що було змінено від одної версії до іншої.</p>
<h2 id="специфікація-семантичного-версіонування-semver">Специфікація семантичного версіонування (SemVer)</h2>
<p>Ключові слова «ПОВИНЕН», «НЕ ПОВИНЕН», «ПОТРІБНО», &ldquo;НЕ СЛІД&rdquo;, &ldquo;РЕКОМЕНДОВАНО&rdquo;, &ldquo;МОЖЕ&rdquo; та &ldquo;НЕОБОВ&rsquo;ЯЗКОВО&rdquo; в цьому документі мають бути інтерпретується, як описано в <a href="https://tools.ietf.org/html/rfc2119">RFC 2119</a></p>
<ol>
<li>
<p>Програмне забезпечення, яке використовує Семантичне версіонування, ПОВИННО оголошувати публічний API. Це API
може бути оголошене в коді або існувати виключно в документації.
Безперервність його виконання, ЦЕМІ повинно бути чітким і всебічним.</p>
</li>
<li>
<p>Звичайний номер версії ПОВИННО мати форму X.Y.Z, де X, Y та Z є
невід&rsquo;ємні цілі числа і НЕ МОЖЕ містити ведучих нулів. X - це
основна версія, Y - версія мінора, а Z - версія патча.
Кожен елемент ПОВИННО збільшуватися числово. Наприклад: 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0.</p>
</li>
<li>
<p>Після випуску версійного пакета, зміст цієї версії
ПОВИННО НЕ МОЖЕ бути змінений. Будь-які зміни ПОВИННО бути випущені як нова версія.</p>
</li>
<li>
<p>Основна версія нуль (0.y.z) використовується для початкового розроблення. Все МОЖЕ змінитися
в будь-який час. Публічне API НЕ ПОВИННО вважатися стійким.</p>
</li>
<li>
<p>Версія 1.0.0 визначає публічне API. Спосіб, яким збільшується номер версії
після цього випуску, залежить від цього публічного API та того, як воно
змінюється.</p>
</li>
<li>
<p>Патч-версія Z (x.y.Z | x &gt; 0) ПОВИННО бути збільшена, якщо вводяться тільки сумісні з попередніми
виправлення помилок. Виправлення помилок визначається як внутрішня
зміна, яка виправляє невірну поведінку.</p>
</li>
<li>
<p>Версія мінора Y (x.Y.z | x &gt; 0) ПОВИННО бути збільшена, якщо вводиться новий сумісний з попередніми
функціонал для публічного API. Вона ПОВИННО також бути
збільшена, якщо будь-який функціонал публічного API позначено як застарілий. Вона МОЖЕ бути
збільшена, якщо в приватному коді вводяться значущі нові функціонал чи поліпшення.
Вона МОЖЕ включати зміни рівня патча. Патч-версія
ПОВИННО бути скинута на 0, коли збільшується версія мінора.</p>
</li>
<li>
<p>Основна версія X (X.y.z | X &gt; 0) ПОВИННО бути збільшена, якщо вводяться несумісні з попередніми
зміни до публічного API. Вона МОЖЕ також включати зміни рівня мінора
та патча. Патч та мінор версії ПОВИННО бути скинуті на 0, коли збільшується
основна версія.</p>
</li>
<li>
<p>Попередню версію МОЖНА позначити, додавши дефіс і серію ідентифікаторів, розділених крапками, які відразу слідують за номером патча. Ідентифікатори ПОВИННІ містити лише ASCII-буквено-цифрові символи та дефіси [0-9A-Za-z-]. Ідентифікатори НЕ МОЖУ бути порожніми. Числові ідентифікатори НЕ МОЖУ містити ведучих нулів. Попередні версії мають менший пріоритет, ніж пов&rsquo;язана нормальна версія. Попередня версія вказує на те, що версія є нестабільною і може не відповідати задуманим вимогам сумісності, як вказано в пов&rsquo;язаній нормальній версії. Приклади: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92, 1.0.0-x-y-z.--.</p>
</li>
<li>
<p>Метадані збірки МОЖНА позначити, додавши знак плюса та серію ідентифікаторів, розділених крапками, які відразу слідують за номером патча чи попередньої версії. Ідентифікатори ПОВИННІ містити лише ASCII-буквено-цифрові символи та дефіси [0-9A-Za-z-]. Ідентифікатори НЕ МОЖУ бути порожніми. Метадані збірки ПОВИННІ бути ігноровані при визначенні пріоритету версії. Таким чином, дві версії, які відрізняються лише метаданими збірки, мають однаковий пріоритет. Приклади: 1.0.0-alpha+001, 1.0.0+20130313144700, 1.0.0-beta+exp.sha.5114f85, 1.0.0+21AF26D3----117B344092BD.</p>
</li>
<li>
<p>Пріоритет вказує на те, як версії порівнюються між собою при впорядкуванні.</p>
<ol>
<li>
<p>Пріоритет МАЄ бути розрахований шляхом розділення версії на основні, додаткові,
патч і ідентифікатори попередньої версії в цьому порядку (метадані збірки
не враховуються при визначенні пріоритету).</p>
</li>
<li>
<p>Пріоритет визначається першою різницею при порівнянні кожного з цих ідентифікаторів
зліва направо наступним чином: основні, додаткові і патч-версії завжди порівнюються
числово.</p>
<p>Приклад: 1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1.</p>
</li>
<li>
<p>Коли основні, додаткові і патч-версії рівні, пріоритет попередньої версії
нижчий за пріоритет звичайної версії:</p>
<p>Приклад: 1.0.0-alpha &lt; 1.0.0.</p>
</li>
<li>
<p>Пріоритет для двох попередніх версій з однаковими основними, додатковими і
патч-версіями МАЄ бути визначений порівнянням кожного ідентифікатора, розділеного
крапкою, зліва направо, доки не буде знайдена різниця наступним чином:</p>
<ol>
<li>
<p>Ідентифікатори, що складаються тільки з цифр, порівнюються числово.</p>
</li>
<li>
<p>Ідентифікатори з буквами або дефісами порівнюються лексикографічно за
порядком ASCII-сортування.</p>
</li>
<li>
<p>Числові ідентифікатори завжди мають нижчий пріоритет, ніж нечислові ідентифікатори.</p>
</li>
<li>
<p>Більший набір полів попередньої версії має вищий пріоритет, ніж менший, якщо всі
попередні ідентифікатори рівні.</p>
</li>
</ol>
<p>Приклад: 1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt;
1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0.</p>
</li>
</ol>
</li>
</ol>
<h2 id="приклади">Приклади</h2>
<h3 id="інкремент-основної-версії">Інкремент Основної Версії</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Перед важливими змінами
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.0.0&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="c1">// Після важливих змін
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;2.0.0&#34;</span><span class="p">;</span></span></span></code></pre></div><h3 id="інкремент-додаткової-версії">Інкремент Додаткової Версії</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Перед додаванням нового функціоналу
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.2.0&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="c1">// Після додавання нового функціоналу
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.3.0&#34;</span><span class="p">;</span></span></span></code></pre></div><h3 id="інкремент-патч-версії">Інкремент Патч Версії</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Перед виправленням помилки
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.2.3&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="c1">// Після виправлення помилки
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.2.4&#34;</span><span class="p">;</span></span></span></code></pre></div><h3 id="версія-попередньої-версії">Версія Попередньої Версії</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// Перед стабільним випуском
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.2.3-alpha.1&#34;</span><span class="p">;</span></span></span></code></pre></div><h3 id="метадані-збірки">Метадані Збірки</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="ln">1</span><span class="cl"><span class="c1">// З метаданими збірки
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="c1"></span><span class="k">pub</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="no">VERSION</span>: <span class="kp">&amp;</span><span class="kt">str</span> <span class="o">=</span><span class="w"> </span><span class="s">&#34;1.2.3+20130313144700&#34;</span><span class="p">;</span></span></span></code></pre></div><h2 id="чому-використовувати-семантичне-версіонування">Чому використовувати Семантичне Версіонування?</h2>
<p>Це не нова або революційна ідея. Фактично, ви, можливо, вже робите щось
схоже до цього. Проблема в тому, що &ldquo;схоже&rdquo; недостатньо. Без
відповідності якій-небудь формальній специфікації номерів версій
фактично є непридатними для управління залежностями. Давши ім&rsquo;я і чітке
визначення вищезазначеним ідеям, стає легко сповістити ваші наміри
користувачам вашого програмного забезпечення. Як тільки ці наміри стають зрозумілими,
можна кінцево створити гнучкі (але не занадто гнучкі) специфікації залежностей.</p>
<p>Простий приклад покаже, як Семантичне Версіонування може зробити пекло
залежностей річчю минулого. Припустимо, є бібліотека під назвою &ldquo;Firetruck.&rdquo; Вона вимагає
пакету з Семантичним Версіонуванням під назвою &ldquo;Ladder.&rdquo; На момент створення
Firetruck, Ladder має версію 3.1.0. Оскільки Firetruck використовує певний функціонал,
який був вперше представлений у версії 3.1.0, ви можете безпечно вказати залежність від Ladder
як більше або рівне 3.1.0, але менше 4.0.0. Тепер, коли доступні версії Ladder 3.1.1 і 3.2.0,
ви можете випустити їх до вашої системи управління пакетами і знати, що вони будуть сумісні з існуючим
залежним програмним забезпеченням.</p>
<p>Як відповідальний розробник, вам, звісно, захочеться перевірити, що будь-які
оновлення пакетів працюють так, як оголошено. Реальний світ - це брудне місце;
ми не можемо нічого з цим зробити, крім як бути бджолиним. Те, що ви можете зробити, - це дозволити
Семантичному Версіонуванню забезпечити вам розумний спосіб випуску та оновлення
пакетів без необхідності створювати нові версії залежних пакетів, що економить вам
час і клопіт.</p>
<p>Якщо все це звучить бажаним, все, що вам потрібно зробити для початку використання
Семантичного Версіонування - це заявити, що ви це робите, і потім слідувати правилам. Посилайтеся
на цей веб-сайт у своєму README, щоб інші знали правила і могли скористатися ними.</p>
<h2 id="часті-питання-faq">Часті питання (FAQ)</h2>
<h3 id="як-мені-поводитися-з-версіями-під-час-початкового-етапу-розробки-0yz">Як мені поводитися з версіями під час початкового етапу розробки 0.y.z?</h3>
<p>Найпростіше - розпочніть свій початковий випуск розробки з 0.1.0
і збільшуйте мінорну версію для кожного наступного випуску.</p>
<h3 id="як-я-можу-зрозуміти-коли-випускати-версію-100">Як я можу зрозуміти, коли випускати версію 1.0.0?</h3>
<p>Якщо ваше програмне забезпечення використовується в експлуатації, ймовірно, воно вже має
версію 1.0.0. Якщо у вас є стабільний API, в якому користувачі вже залежать, ви повинні
бути на версії 1.0.0. Якщо ви сильно турбуєтеся про зворотню сумісність, ви вже маєте бути на версії 1.0.0.</p>
<h3 id="це-не-сприяє-швидкому-розвитку-і-швидкій-ітерації">Це не сприяє швидкому розвитку і швидкій ітерації?</h3>
<p>Основна версія нуль - це все про швидкий розвиток. Якщо ви змінюєте API
щодня, ви повинні залишатися на версії 0.y.z або на окремій
гілці розробки, працюючи над наступною основною версією.</p>
<h3 id="якщо-навіть-найменші-зворотно-несумісні-зміни-у-вузькому-api-вимагають-інкремента-основної-версії-чи-не-буду-я-дуже-швидко-на-версії-4200">Якщо навіть найменші зворотно-несумісні зміни у вузькому API вимагають інкремента основної версії, чи не буду я дуже швидко на версії 42.0.0?</h3>
<p>Це питання відповідального розвитку та передбачення. Несумісні зміни
не повинні бути вводитися легко в програмне забезпечення, яке має багато
залежного коду. Вартість, яку потрібно витратити для оновлення, може бути значною.
Необхідність збільшувати основні версії для випуску несумісних змін означає, що ви
ретельно обдумаєте вплив ваших змін і оціните відношення витрат/користі
залучених.</p>
<h3 id="документувати-весь-вузький-api---це-занадто-багато-роботи">Документувати весь вузький API - це занадто багато роботи!</h3>
<p>Це ваша відповідальність як професійного розробника належним чином документувати
програмне забезпечення, яке призначено для використання іншими. Управління складністю
програмного проекту є великою частиною забезпечення ефективності проекту, і це важко робити,
якщо ніхто не знає, як використовувати ваше програмне забезпечення або які методи безпечно викликати.
У довгостроковій перспективі Семантичне Версіонування і настоювання на чітко визначений
вузький API може допомогти утримувати все і всіх в робочому стані.</p>
<h3 id="що-робити-якщо-я-випадково-випустив-несумісні-зміни-в-публічному-api-як-мінорну-версію">Що робити, якщо я випадково випустив несумісні зміни в публічному API як мінорну версію?</h3>
<p>Як тільки ви розумієте, що порушено специфікацію Семантичного Версіонування, виправте
проблему та випустіть нову мінорну версію, яка виправляє проблему і
відновлює зворотню сумісність. Навіть у цьому випадку неприпустимо змінювати версії.
Якщо це відповідно, задокументуйте проблемну версію та повідомте своїх користувачів про проблему,
щоб вони були обізнані з проблемною версією.</p>
<h3 id="що-робити-якщо-я-оновлюю-власні-залежності-без-зміни-публічного-api">Що робити, якщо я оновлюю власні залежності без зміни публічного API?</h3>
<p>Це вважається сумісним, оскільки це не впливає на публічне API.
Програмне забезпечення, яке явно залежить від тих самих залежностей, що й ваш пакет,
повинно мати свої власні специфіка</p>
<p>ції залежностей, і автор помітить будь-які конфлікти.
Визначення того, чи це патч-рівень чи мінімальний рівень модифікації, залежить від того, чи ви оновили ваші залежності для виправлення
багу чи введення нового функціоналу. Зазвичай ми очікуємо додатковий код
для останнього випадку, у якому, очевидно, це інкремент рівня мінімум.</p>
<h3 id="що-робити-якщо-я-непроцільно-змінив-публічне-api-так-що-це-не-відповідає-зміні-номера-версії-тобто-код-неправильно-вводить-значущі-зміни-в-патч-релізі">Що робити, якщо я непроцільно змінив публічне API так, що це не відповідає зміні номера версії (тобто код неправильно вводить значущі зміни в патч-релізі)?</h3>
<p>Використовуйте свій здоровий глузд. Якщо у вас є велика аудиторія, яку дуже
сильно вразить зміна поведінки назад до того, що публічне API передбачало, тоді
можливо, найкраще випустити основну версію, навіть якщо виправлення можна було б
строгим патч-релізом. Пам&rsquo;ятайте, що Семантичне Версіонування все
про передачу значення тим, як змінюється номер версії. Якщо ці зміни
важливі для ваших користувачів, використовуйте номер версії, щоб повідомити їх.</p>
<h3 id="як-мені-поводитися-зі-зстарюючою-функціональністю">Як мені поводитися зі зстарюючою функціональністю?</h3>
<p>Застарювання існуючої функціональності - це звичайна частина розробки програмного забезпечення і
часто є необхідним для руху вперед. Коли ви застарюєте частину свого
вузького API, вам слід зробити дві речі: (1) оновити свою документацію, щоб
повідомити користувачів про зміну, (2) випустити новий мінорний випуск зі зстарюванням
на місці. Перш ніж повністю вилучити функціональність у новому основному випуску,
повинен бути принаймні один мінорний випуск, що містить застарювання, так
щоб користувачі могли плавно перейти до нового API.</p>
<h3 id="чи-існує-обмеження-розміру-рядка-версії-у-semver">Чи існує обмеження розміру рядка версії у SemVer?</h3>
<p>Ні, але використовуйте здоровий глузд. Строка версії завдовжки 255 символів, наприклад, ймовірно, зайвий.
Також конкретні системи можуть накладати свої власні обмеження на розмір
рядка.</p>
<h3 id="чи-є-v123-семантичною-версією">Чи є &ldquo;v1.2.3&rdquo; семантичною версією?</h3>
<p>Ні, &ldquo;v1.2.3&rdquo; не є семантичною версією. Однак префіксування семантичної версії
з &ldquo;v&rdquo; - це загальний спосіб (на англійській мові) вказати, що це номер версії.
Скорочення &ldquo;version&rdquo; до &ldquo;v&rdquo; часто використовується в контролі версій. Наприклад:
<code>git tag v1.2.3 -m &quot;Release version 1.2.3&quot;</code>, в цьому випадку &ldquo;v1.2.3&rdquo; - це тег
ім&rsquo;я, а семантична версія - &ldquo;1.2.3&rdquo;.</p>
<h2 id="про">Про</h2>
<p>Специфікацію Семантичного Версіонування спочатку написав <a href="https://tom.preston-werner.com">Том
Престон-Вернер</a> Винахідник Gravatar та
співзасновник GitHub.</p>
<h2 id="ліцензія">Ліцензія</h2>
<p><a href="https://creativecommons.org/licenses/by/3.0/">Creative Commons ― CC BY 3.0</a></p>
<p>Першоджерело: <a href="https://semver.org/">https://semver.org/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Конвенції Коду</title>
      <link>//localhost:1313/uk/docs/code-conventions/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/code-conventions/</guid>
      <description>Значення пріоритетів Значення оцінки Правила репозиторію Правила гілок Коміти Правила завдань Правила запитів на злиття (PR) Правила форматування коду Додаткові конвенції коду Ключові слова &amp;ldquo;MUST&amp;rdquo;, &amp;ldquo;MUST NOT&amp;rdquo;, &amp;ldquo;REQUIRED&amp;rdquo;, &amp;ldquo;SHALL&amp;rdquo;, &amp;ldquo;SHALL NOT&amp;rdquo;, &amp;ldquo;SHOULD&amp;rdquo;, &amp;ldquo;SHOULD NOT&amp;rdquo;, &amp;ldquo;RECOMMENDED&amp;rdquo;, &amp;ldquo;MAY&amp;rdquo; та &amp;ldquo;OPTIONAL&amp;rdquo; у цьому документі слід трактувати так, як описано у RFC 2119.
Значення пріоритетів Low - низький пріоритет (невеликі точкові вдосконалення).
Normal - звичайний пріоритет (основні функції, виправлення).
High - високий пріоритет (важлива основна функція, виправлення).</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/code-conventions/#значення-пріоритетів">Значення пріоритетів</a></li>
<li><a href="/uk/docs/code-conventions/#значення-оцінки">Значення оцінки</a></li>
<li><a href="/uk/docs/code-conventions/#правила-репозиторію">Правила репозиторію</a></li>
<li><a href="/uk/docs/code-conventions/#правила-гілок">Правила гілок</a></li>
<li><a href="/uk/docs/code-conventions/#коміти">Коміти</a></li>
<li><a href="/uk/docs/code-conventions/#правила-завдань">Правила завдань</a></li>
<li><a href="/uk/docs/code-conventions/#правила-запитів-на-злиття-pr">Правила запитів на злиття (PR)</a></li>
<li><a href="/uk/docs/code-conventions/#правила-форматування-коду">Правила форматування коду</a></li>
<li><a href="/uk/docs/code-conventions/#додаткові-конвенції-коду">Додаткові конвенції коду</a></li>
</ul>
<!-- raw HTML omitted -->
<blockquote>
<p>Ключові слова &ldquo;MUST&rdquo;, &ldquo;MUST NOT&rdquo;, &ldquo;REQUIRED&rdquo;, &ldquo;SHALL&rdquo;, &ldquo;SHALL NOT&rdquo;, &ldquo;SHOULD&rdquo;, &ldquo;SHOULD NOT&rdquo;, &ldquo;RECOMMENDED&rdquo;, &ldquo;MAY&rdquo; та &ldquo;OPTIONAL&rdquo; у цьому документі слід трактувати так, як описано у <a href="https://www.rfc-editor.org/rfc/rfc2119">RFC 2119</a>.</p>
</blockquote>
<h2 id="значення-пріоритетів">Значення пріоритетів</h2>
<ul>
<li>
<p><code>Low</code> - низький пріоритет (невеликі точкові вдосконалення).</p>
</li>
<li>
<p><code>Normal</code> - звичайний пріоритет (основні функції, виправлення).</p>
</li>
<li>
<p><code>High</code> - високий пріоритет (важлива основна функція, виправлення).</p>
</li>
<li>
<p><code>Blocker</code> - інші завдання не можуть бути виконані, поки це питання не буде вирішено.</p>
</li>
</ul>
<h2 id="значення-оцінки">Значення оцінки</h2>
<ul>
<li>
<p><code>Години</code> - завдання може зайняти від 1 до 8 годин.</p>
</li>
<li>
<p><code>Дні</code> - завдання може зайняти від 1 до 7 днів.</p>
</li>
<li>
<p><code>Тижні</code> - завдання може зайняти від 1 до 2 тижнів.</p>
</li>
</ul>
<p>Якщо оцінка перевищує 2 тижні, завдання ОБОВ&rsquo;ЯЗКОВО слід розбити на менші частини.</p>
<h2 id="правила-репозиторію">Правила репозиторію</h2>
<ul>
<li>
<p>Репозиторій ОБОВ&rsquo;ЯЗКОВО повинен дозволяти або <code>злиття комітів</code> або <code>злиття rebase</code>.</p>
</li>
<li>
<p>Репозиторій ОБОВ&rsquo;ЯЗКОВО не повинен дозволяти <code>злиття squash</code>.</p>
</li>
</ul>
<h2 id="правила-гілок">Правила гілок</h2>
<ul>
<li>
<p>Назва головної гілки ОБОВ&rsquo;ЯЗКОВО повинна бути <code>main</code>.</p>
</li>
<li>
<p>Назва головної гілки <code>main</code> ОБОВ&rsquo;ЯЗКОВО повинна бути захищена.</p>
</li>
<li>
<p>Назву гілки <code>main</code> ОБОВ&rsquo;ЯЗКОВО не можна форсувати.</p>
</li>
<li>
<p>Для кожного завдання чи функції ОБОВ&rsquo;ЯЗКОВО повинна створюватися нова гілка.</p>
</li>
<li>
<p>Назва нової гілки ОБОВ&rsquo;ЯЗКОВО повинна відповідати наступному шаблону <code>&lt;тип&gt;/PR-НОМЕР/додаткова-інформація&gt;</code>, де <code>&lt;тип&gt;</code> взято зі стандарту <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits v1.0.0</a></p>
<p>наприклад:</p>
<blockquote>
<p><code>fix/#9</code></p>
</blockquote>
<blockquote>
<p><code>feat/#883/hatsune-miku-the-real-one</code></p>
</blockquote>
<blockquote>
<p><code>docs/#1/me-and-waifu</code></p>
</blockquote>
</li>
</ul>
<h2 id="коміти">Коміти</h2>
<ul>
<li>
<p>Повідомлення коміту ОБОВ&rsquo;ЯЗКОВО повинно відповідати стандарту <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits v1.0.0</a></p>
</li>
<li>
<p>Повідомлення коміту ОБОВ&rsquo;ЯЗКОВО повинно містити номер pull request (наприклад, #54) у зоні видимості.</p>
<p>наприклад: <code>fix(#53): змінити колір кнопки на червоний</code></p>
</li>
<li>
<p>Коміт ОБОВ&rsquo;ЯЗКОВО повинен бути підписаний.</p>
</li>
</ul>
<h2 id="правила-завдань">Правила завдань</h2>
<ul>
<li>
<p>Якщо завдання не перебуває в <code>Беклогу</code>, то воно ОБОВ&rsquo;ЯЗКОВО повинно мати заголовок, опис, пріоритет, оцінку та принаймні один мітку.</p>
</li>
<li>
<p>Тіло завдання НЕ ПОВИННО бути порожнім.</p>
</li>
</ul>
<h2 id="правила-запитів-на-злиття-pr">Правила запитів на злиття (PR)</h2>
<ul>
<li>
<p>Заголовок PR ОБОВ&rsquo;ЯЗКОВО повинен відповідати стандарту <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional Commits v1.0.0</a></p>
</li>
<li>
<p>Тіло PR НЕ ПОВИННО бути порожнім.</p>
</li>
<li>
<p>PR ОБОВ&rsquo;ЯЗКОВО повинен бути пов&rsquo;язаний з проектом.</p>
</li>
</ul>
<h2 id="правила-форматування-коду">Правила форматування коду</h2>
<ul>
<li>
<p>У репозиторії ОБОВ&rsquo;ЯЗКОВО повинен бути визначений стиль форматування у проекті.</p>
</li>
<li>
<p>У репозиторії ОБОВ&rsquo;ЯЗКОВО повинен бути README, який описує, як локально налаштувати лінтер та форматер, використовуючи стиль, визначений у файлі (Якщо є які-небудь конкретні виклики y процесi налаштування).</p>
</li>
</ul>
<h2 id="додаткові-конвенції-коду">Додаткові конвенції коду</h2>
<p><strong>Відступи:</strong> слід використовувати 4 пробіли.</p>
<p><strong>Описові назви:</strong> використовуйте описові назви для функцій або класів.</p>
<p><strong>Коментарі:</strong> уникайте коментарів у коді; старайтеся робити код самоексплікаційним.</p>
<p><strong>Мовні конвенції:</strong> дотримуйтеся стилю мовних конвенцій.</p>
<p><strong>Принцип KISS:</strong> завжди намагайтеся тримати все простим (KISS).</p>
<p><strong>Принцип DRY:</strong> не повторюйте код (DRY), якщо є більше 3 повторень.</p>
<p><strong>Використання бібліотек:</strong> не пишіть нову версію; шукайте, чи вона вже існує, і вивчайте, як її використовувати (нам не потрібна ще одна бібліотека JSON для JS).</p>
<p><strong>Тестування:</strong> завжди приємно, коли у проекті є одиниці тестування або інші типи тестів. Таким чином, принаймні, потрібні модульні тести, і вони ОБОВ&rsquo;ЯЗКОВО повинні охоплювати якнайбільше можливо.</p>
<p><strong>Документація:</strong> підкресліть важливість гарної документації. У кожному репозиторії, модулі, класі та методі повинна бути чітка та стисла документація.</p>
<p><strong>Версіювання:</strong> у відповідності до кращих практик ми використовуємо <a href="/uk/docs/versioning-conventions">Семантичне Версіювання (SemVer)</a></p>
<p><strong>Власність коду:</strong> завжди роз&rsquo;яснюйте концепцію власності коду. Вкажіть, хто відповідальний за підтримку різних частин кодової бази.</p>
<p><strong>Постійна інтеграція (CI) та постійна доставка (CD):</strong> Намітте практики CI/CD, включаючи автоматизоване тестування, конвеєри розгортання та стратегії версіонування. Завжди намагайтеся автоматизувати.</p>
<p><strong>Доступність та інтернаціоналізація:</strong> У разі необхідності включіть вказівки щодо забезпечення доступності вашого програмного забезпечення та підтримки інтернаціоналізації (i18n) та локалізації (l10n).</p>
<p><strong>Норми спільноти:</strong> Якщо ваш проект включає у себе спільноту з відкритим кодом, включіть норми для участі спільноти, звітів про проблеми та кодексу поведінки.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Посібник по початку роботи</title>
      <link>//localhost:1313/uk/docs/getting-started/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/getting-started/</guid>
      <description>1. Налаштування середовища розробки 2. Вивчення проектів клубу 3. Отримання допомоги Цей посібник допоможе вам розпочати свій шлях з нами, надаючи основні кроки для налаштування середовища розробки, орієнтації у наших проектах та взаємодії з спільнотою.
1. Налаштування середовища розробки Перед тим як поглибитися у наші проекти, переконайтеся, що ваше середовище розробки належним чином налаштовано. Ось загальний посібник з налаштування:
Редактор коду: Встановіть редактор коду за вашим вибором, такий як Neovim/Vim або Emacs, або будь-який інший, який вам подобається :)</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/getting-started/#1-налаштування-середовища-розробки">1. Налаштування середовища розробки</a></li>
<li><a href="/uk/docs/getting-started/#2-вивчення-проектів-клубу">2. Вивчення проектів клубу</a></li>
<li><a href="/uk/docs/getting-started/#3-отримання-допомоги">3. Отримання допомоги</a></li>
</ul>
<!-- raw HTML omitted -->
<p>Цей посібник допоможе вам розпочати свій шлях з нами, надаючи основні кроки для налаштування середовища розробки, орієнтації у наших проектах та взаємодії з спільнотою.</p>
<h2 id="1-налаштування-середовища-розробки">1. Налаштування середовища розробки</h2>
<p>Перед тим як поглибитися у наші проекти, переконайтеся, що ваше середовище розробки належним чином налаштовано. Ось загальний посібник з налаштування:</p>
<ul>
<li>
<p><strong>Редактор коду:</strong> Встановіть редактор коду за вашим вибором, такий як Neovim/Vim або Emacs, або будь-який інший, який вам подобається :)</p>
</li>
<li>
<p><strong>Контроль версій:</strong> Налаштуйте систему контролю версій Git на своєму комп&rsquo;ютері.</p>
</li>
<li>
<p><strong>Виконавчий середовище/SDK:</strong> Встановіть необхідний виконавчий середовище мови програмування або SDK для проектів, над якими ви збираєтеся працювати.</p>
</li>
<li>
<p><strong>Налаштування для конкретного проекту:</strong> Ознайомтеся із інструкціями щодо налаштування для конкретного проекту в файлі README.md відповідного проекту.</p>
</li>
</ul>
<h2 id="2-вивчення-проектів-клубу">2. Вивчення проектів клубу</h2>
<p>Відкрийте для себе та вносьте внесок у захоплюючі проекти в межах нашого клубу, слідуючи цими кроками:</p>
<ul>
<li>
<p><strong>Репозитарій GitHub:</strong> Досліджуйте репозитарій GitHub нашого клубу, щоб відкрити для себе різноманітні поточні проекти.</p>
</li>
<li>
<p><strong>Створення Fork та Клонування:</strong> Виберіть цікавий проект, створіть його Fork, клонуйте його на свій локальний комп&rsquo;ютер та слідуйте інструкціям щодо налаштування, наданим в файлі README.md.</p>
</li>
</ul>
<h2 id="3-отримання-допомоги">3. Отримання допомоги</h2>
<p>Якщо вам коли-небудь потрібна допомога, не соромтеся звертатися. Ось способи отримання допомоги:</p>
<ul>
<li><strong>Канали спільноти:</strong></li>
</ul>
<p>Приєднуйтеся до відповідних каналів нашої платформи зв&rsquo;язку, щоб спілкуватися з іншими учасниками та шукати допомоги.</p>
<ul>
<li>
<p><strong>Проблеми GitHub:</strong> Відкривайте проблеми безпосередньо у репозитoрії GitHub проекту, щоб ставити проект-специфічні питання або повідомляти про будь-які проблеми, з якими ви зіткнулись.</p>
</li>
<li>
<p><strong>Події клубу:</strong> Беріть участь у зустрічах чи подіях клубу, щоб спілкуватися з іншими учасниками та наставниками, отримуючи цінні інсайти та підтримку.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Правила внесення внеску</title>
      <link>//localhost:1313/uk/docs/contributing/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/contributing/</guid>
      <description>1. Як внести свій внесок 2. Кодекс Поведінки 3. Повідомлення про помилки 4. Запропонування поліпшень 5. Внесення коду 6. Процес Pull Request 7. Процес огляду 8. Здійснення Кодексу Поведінки Дотримуючись цих правил, ви можете допомогти нам підтримувати спільноту, що сприяє співпраці та інклюзивності.
1. Як внести свій внесок Внесок до наших проектів простий! Дотримуйтеся цих кроків, щоб розпочати:
Зробіть форк або клонуйте репозиторій.
Створіть нову гілку для вашої функції або виправлення помилок.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/contributing/#1-як-внести-свій-внесок">1. Як внести свій внесок</a></li>
<li><a href="/uk/docs/contributing/#2-кодекс-поведінки">2. Кодекс Поведінки</a></li>
<li><a href="/uk/docs/contributing/#3-повідомлення-про-помилки">3. Повідомлення про помилки</a></li>
<li><a href="/uk/docs/contributing/#4-запропонування-поліпшень">4. Запропонування поліпшень</a></li>
<li><a href="/uk/docs/contributing/#5-внесення-коду">5. Внесення коду</a></li>
<li><a href="/uk/docs/contributing/#6-процес-pull-request">6. Процес Pull Request</a></li>
<li><a href="/uk/docs/contributing/#7-процес-огляду">7. Процес огляду</a></li>
<li><a href="/uk/docs/contributing/#8-здійснення-кодексу-поведінки">8. Здійснення Кодексу Поведінки</a></li>
</ul>
<!-- raw HTML omitted -->
<p>Дотримуючись цих правил, ви можете допомогти нам підтримувати спільноту, що сприяє співпраці та інклюзивності.</p>
<h2 id="1-як-внести-свій-внесок">1. Як внести свій внесок</h2>
<p>Внесок до наших проектів простий! Дотримуйтеся цих кроків, щоб розпочати:</p>
<ul>
<li>
<p>Зробіть форк або клонуйте репозиторій.</p>
</li>
<li>
<p>Створіть нову гілку для вашої функції або виправлення помилок.</p>
</li>
<li>
<p>Внесіть зміни та збережіть їх з чіткими та лаконічними повідомленнями.</p>
</li>
<li>
<p>Запуште свої зміни до вашої гілки.</p>
</li>
<li>
<p>Подайте запит на витяг, пояснюючи зроблені зміни.</p>
</li>
</ul>
<p><a href="/uk/docs/code-conventions">Докладніше про конвенції коду</a></p>
<h2 id="2-кодекс-поведінки">2. Кодекс Поведінки</h2>
<p>Будь ласка, перегляньте та дотримуйтеся нашого <a href="/uk/docs/code-of-conduct">Кодексу Поведінки</a> щоб забезпечити позитивне та інклюзивне середовище для всіх.</p>
<h2 id="3-повідомлення-про-помилки">3. Повідомлення про помилки</h2>
<p>Якщо ви зіткнетеся з помилкою, відкрийте питання за цими вказівками:</p>
<ul>
<li>
<p>Включіть детальний опис помилки та кроки для її відтворення.</p>
</li>
<li>
<p>Додайте відповідні знімки екрану або повідомлення про помилки (необов&rsquo;язково, але часто може бути корисно).</p>
</li>
</ul>
<h2 id="4-запропонування-поліпшень">4. Запропонування поліпшень</h2>
<p>Маєте чудову ідею для поліпшення? Дотримуйтеся цих кроків:</p>
<ul>
<li>
<p>Чітко описуйте запропоноване поліпшення.</p>
</li>
<li>
<p>Надайте будь-який додатковий контекст чи приклади.</p>
</li>
</ul>
<h2 id="5-внесення-коду">5. Внесення коду</h2>
<p>При внесенні коду дотримуйтеся цих правил:</p>
<ul>
<li>
<p>Додержуйтесь стандартів та конвенцій коду, описаних у <a href="/uk/docs/code-conventions">code-conventions.md</a></p>
</li>
<li>
<p>Забезпечте належну документацію вашого коду.</p>
</li>
<li>
<p>Напишіть тести до свого коду, якщо це застосовно.</p>
</li>
<li>
<p>Робіть невеликі, спрямовані коміти з чіткими повідомленнями.</p>
</li>
</ul>
<h2 id="6-процес-pull-request">6. Процес Pull Request</h2>
<p>Дотримуйтеся цих кроків при поданні запиту на витяг:</p>
<ul>
<li>
<p>Забезпечте, щоб ваша гілка була актуальною на випадок останніх змін з гілки main.</p>
</li>
<li>
<p>Додайте відповідні тести до своїх змін.</p>
</li>
<li>
<p>Оновіть документацію за потреби.</p>
</li>
<li>
<p>Забезпечте, що ваш код проходить всі автоматизовані перевірки.</p>
</li>
<li>
<p>Запитайте відгуки від інших учасників.</p>
</li>
</ul>
<h2 id="7-процес-огляду">7. Процес огляду</h2>
<p>Всі внески проходять процес огляду:</p>
<ul>
<li>
<p>Оглядачі нададуть відгук та, якщо потрібно, вимагають змін.</p>
</li>
<li>
<p>Враховуйте відгуки та вносьте необхідні коригування.</p>
</li>
<li>
<p>Після схвалення ваш запит на витяг буде злитий.</p>
</li>
</ul>
<h2 id="8-здійснення-кодексу-поведінки">8. Здійснення Кодексу Поведінки</h2>
<p>Ми серйозно ставимося до нашого Кодексу Поведінки. Будь-які порушення повинні бути повідомлені за адресою <strong><a href="mailto:the.sead.club@gmail.com">the.sead.club@gmail.com</a></strong> Всі звіти будуть зберігатися конфіденційно.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Стандарти Документації</title>
      <link>//localhost:1313/uk/docs/documentation-standards/</link>
      <pubDate>Wed, 27 Dec 2023 00:00:00 +0000</pubDate>
      <author>github.com/btwkenji</author>
      <guid>//localhost:1313/uk/docs/documentation-standards/</guid>
      <description>1. Документація Коду 2. Документація Проекту Внесення в Стандарти Документації Цей документ надає вказівки з документування коду, проектів та процесів ефективно. Чітка та всебічна документація є важливою для розуміння та майбутнього обслуговування наших проектів.
1. Документація Коду У code-conventions.md ми встановили конвенції коду. Крім того, документація коду повинна відповідати наступним стандартам:
Коментарі: Використовуйте коментарі обережно та старайтеся досягати самовідповідності коду. Додавайте коментарі лише для складних алгоритмів або для пояснення невідомих розділів коду.</description>
      <content:encoded><![CDATA[<!-- raw HTML omitted -->
<ul>
<li><a href="/uk/docs/documentation-standards/#1-документація-коду">1. Документація Коду</a></li>
<li><a href="/uk/docs/documentation-standards/#2-документація-проекту">2. Документація Проекту</a></li>
<li><a href="/uk/docs/documentation-standards/#внесення-в-стандарти-документації">Внесення в Стандарти Документації</a></li>
</ul>
<!-- raw HTML omitted -->
<p>Цей документ надає вказівки з документування коду, проектів та процесів ефективно. Чітка та всебічна документація є важливою для розуміння та майбутнього обслуговування наших проектів.</p>
<h2 id="1-документація-коду">1. Документація Коду</h2>
<p>У <a href="/uk/docs/code-conventions">code-conventions.md</a> ми встановили конвенції коду. Крім того, документація коду повинна відповідати наступним стандартам:</p>
<ul>
<li>
<p><strong>Коментарі:</strong> Використовуйте коментарі обережно та старайтеся досягати самовідповідності коду. Додавайте коментарі лише для складних алгоритмів або для пояснення невідомих розділів коду.</p>
</li>
<li>
<p><strong>Встроєна Документація:</strong> Використовуйте інструменти встроєної документації, якщо це застосовно (наприклад, JSDoc для JavaScript).</p>
</li>
</ul>
<h2 id="2-документація-проекту">2. Документація Проекту</h2>
<p>Правильна документація проекту є важливою для введення та обслуговування проектів. Дотримуйтесь цих стандартів:</p>
<ul>
<li>
<p><strong>README.md:</strong> Кожен проект ПОВИНЕН мати всеосяжний README.md, який охоплює загальний вигляд проекту, інструкції з встановлення, приклади використання та вказівки щодо внесення.</p>
</li>
<li>
<p><strong>Wiki:</strong> Розгляньте можливість використання вікі репозитарію для глибокої документації, посібників та навчань.</p>
</li>
<li>
<p><strong>Діаграми Архітектури:</strong> У разі потреби додайте діаграми високого рівня архітектури для полегшення розуміння.</p>
</li>
</ul>
<h2 id="внесення-в-стандарти-документації">Внесення в Стандарти Документації</h2>
<p>Якщо у вас є пропозиції або покращення для цих стандартів документації, будь ласка, відкривайте питання або надсилайте запити на витяг. Ваш внесок допомагає забезпечити чітку та ефективну документацію у всіх наших проектах.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>